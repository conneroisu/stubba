import datetime
from _typeshed import Incomplete
from posthog.client import Client as Client
from posthog.version import VERSION as VERSION
from typing import Callable, Dict, Optional

__version__ = VERSION
api_key: str
host: str
on_error: Callable
debug: bool
send: bool
sync_mode: bool
disabled: bool
personal_api_key: str
project_api_key: str
poll_interval: int
disable_geoip: bool
default_client: Incomplete

def capture(distinct_id: str, event: str, properties: Optional[Dict] = None, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, groups: Optional[Dict] = None, send_feature_flags: bool = False, disable_geoip: Optional[bool] = None) -> None: ...
def identify(distinct_id: str, properties: Optional[Dict] = None, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, disable_geoip: Optional[bool] = None) -> None: ...
def set(distinct_id: str, properties: Optional[Dict] = None, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, disable_geoip: Optional[bool] = None) -> None: ...
def set_once(distinct_id: str, properties: Optional[Dict] = None, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, disable_geoip: Optional[bool] = None) -> None: ...
def group_identify(group_type: str, group_key: str, properties: Optional[Dict] = None, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, disable_geoip: Optional[bool] = None) -> None: ...
def alias(previous_id: str, distinct_id: str, context: Optional[Dict] = None, timestamp: Optional[datetime.datetime] = None, uuid: Optional[str] = None, disable_geoip: Optional[bool] = None) -> None: ...
def feature_enabled(key: str, distinct_id: str, groups: dict = {}, person_properties: dict = {}, group_properties: dict = {}, only_evaluate_locally: bool = False, send_feature_flag_events: bool = True, disable_geoip: Optional[bool] = None) -> bool: ...
def get_feature_flag(key: str, distinct_id: str, groups: dict = {}, person_properties: dict = {}, group_properties: dict = {}, only_evaluate_locally: bool = False, send_feature_flag_events: bool = True, disable_geoip: Optional[bool] = None): ...
def get_all_flags(distinct_id: str, groups: dict = {}, person_properties: dict = {}, group_properties: dict = {}, only_evaluate_locally: bool = False, disable_geoip: Optional[bool] = None): ...
def get_feature_flag_payload(key, distinct_id, match_value: Incomplete | None = None, groups={}, person_properties={}, group_properties={}, only_evaluate_locally: bool = False, send_feature_flag_events: bool = True, disable_geoip: Optional[bool] = None): ...
def get_all_flags_and_payloads(distinct_id, groups={}, person_properties={}, group_properties={}, only_evaluate_locally: bool = False, disable_geoip: Optional[bool] = None): ...
def feature_flag_definitions(): ...
def page(*args, **kwargs) -> None: ...
def screen(*args, **kwargs) -> None: ...
def flush() -> None: ...
def join() -> None: ...
def shutdown() -> None: ...

class Posthog(Client): ...
